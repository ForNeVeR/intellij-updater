# SPDX-FileCopyrightText: 2024 Friedrich von Never <friedrich@fornever.me>
#
# SPDX-License-Identifier: MIT

name: 'IntelliJ Updater'
description: 'Update IntelliJ-based IDE versions in the order specified by the configuration file.'
branding:
  icon: refresh-cw
  color: green
inputs:
  config-file:
    description: 'Configuration file'
    required: true
    default: './intellij-updater.json'
  send-pr:
    description: 'Whether the action should send a pull request as the result of its execution, if it determines that changes are required. Otherwise, you can use ay other mean to send a PR if you wish.'
    required: false
    default: 'false'
  pr-token:
    description: 'Token to send the PR. Will only be used if `send-pr` is `true`.'
    required: false
  git-user-name:
    description: '`user.name` parameter for the Git commit in the PR. Will only be used if `send-pr` is `true`.'
    required: false
  git-user-emal:
    description: '`user.email` parameter for the Git commit in the PR. Will only be used if `send-pr` is `true`.'
    required: false
  test-only:
    description: 'Perform internal tests. Is not meant for public use.'
    required: true
    default: 'false'
outputs:
  has-changes:
    description: 'Whether the IntelliJ updater has something to update.'
    value: ${{ steps.update.outputs.has-changes }}
  branch-name:
    description: 'The branch name that should be used for the generated pull request. Only available if `has-changes` is `true`.'
    value: ${{ steps.update.outputs.branch-name }}
  commit-message:
    description: 'The commit message for the generated commit. Only available if `has-changes` is `true`.'
    value: ${{ steps.update.outputs.commit-message }}
  pr-title:
    description: 'The title of the generated pull request. Only available if `has-changes` is `true`.'
    value: ${{ steps.update.outputs.pr-title }}
  pr-body-path:
    description: 'The path to the file containing the PR message in Markdown. Only available if `has-changes` is `true`.'
    value: ${{ steps.update.outputs.pr-body-path }}

runs:
  using: 'composite'
  steps:
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 'Dump environment'
      shell: pwsh
      run: |
        Write-Output "Will run intellij-updater in directory `"$env:ACTION_PATH`"."
        Write-Output "Configuration file: `"$env:CONFIG_FILE`"."
        Write-Output "Output file: `"$env:GITHUB_OUTPUT`"."
      env:
        ACTION_PATH: ${{ github.action_path }}
        CONFIG_FILE: ${{ inputs.config-file }}

    - id: update
      name: 'Update the dependency versions'
      shell: pwsh
      run: dotnet run --project "$env:ACTION_PATH/IntelliJUpdater" -- $env:CONFIG_FILE $env:GITHUB_OUTPUT
      env:
        ACTION_PATH: ${{ github.action_path }}
        CONFIG_FILE: ${{ inputs.config-file }}

    - if: inputs.send-pr == 'true' && steps.update.outputs.has-changes == 'true'
      name: 'Create a PR'
      shell: pwsh
      run: |
        ./scripts/New-PR.ps1 ${{ inputs.test-only == 'true' && '-TestMode' || '' }} `
          -BranchName $env:BRANCH_NAME `
          -CommitMessage $env:COMMIT_MESSAGE `
          -PrTitle $env:PR_TITLE `
          -PrBodyPath $env:PR_BODY_PATH `
          -GitUserName $env:GIT_USER_NAME `
          -GitUserEmail $env:GIT_USER_EMAIL
      env:
        GITHUB_TOKEN: ${{ inputs.pr-token }}
        GIT_USER_NAME: ${{ inputs.git-user-name }}
        GIT_USER_EMAIL: ${{ inputs.git-user-email }}
        BRANCH_NAME: ${{ steps.update.outputs.branch-name }}
        COMMIT_MESSAGE: ${{ steps.update.outputs.commit-message }}
        PR_TITLE: ${{ steps.update.outputs.pr-title }}
        PR_BODY_PATH: ${{ steps.update.outputs.pr-body-path }}
